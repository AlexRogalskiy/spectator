(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(6),a=(n(0),n(131)),p={id:"testing-pipes",title:"Testing Pipes"},i={id:"testing-pipes",title:"Testing Pipes",description:"The following example shows how to test a pipe with Spectator:",source:"@site/docs/testing-pipes.md",permalink:"/spectator/docs/testing-pipes",editUrl:"https://github.com/ngneat/spectator/edit/master/docs/docs/testing-pipes.md",sidebar:"docs",previous:{title:"Testing Directives",permalink:"/spectator/docs/testing-directives"},next:{title:"Testing Services",permalink:"/spectator/docs/testing-services"}},c=[{value:"Setting factory defaults",id:"setting-factory-defaults",children:[]},{value:"Using Custom Host Component",id:"using-custom-host-component",children:[]}],s={rightToc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The following example shows how to test a pipe with Spectator:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { SpectatorPipe, createPipeFactory } from '@ngneat/spectator';\n\nimport { StatsService } from './stats.service';\nimport { SumPipe } from './sum.pipe';\n\ndescribe('SumPipe', () => {\n  let spectator: SpectatorPipe<SumPipe>;\n  const createPipe = createPipeFactory(SumPipe);\n\n  it('should sum up the given list of numbers (template)', () => {\n    spectator = createPipe(`{{ [1, 2, 3] | sum }}`);\n    expect(spectator.element).toHaveText('6');\n  });\n\n  it('should sum up the given list of numbers (prop)', () => {\n    spectator = createPipe(`{{ prop | sum }}`, {\n      hostProps: {\n        prop: [1, 2, 3]\n      }\n    });\n    expect(spectator.element).toHaveText('6');\n  });\n\n  it('should delegate the summation to the service', () => {\n    const sum = () => 42;\n    const provider = { provide: StatsService, useValue: { sum } };\n    spectator = createPipe(`{{ prop | sum }}`, {\n      hostProps: {\n        prop: [2, 40]\n      },\n      providers: [provider]\n    });\n    expect(spectator.element).toHaveText('42');\n  });\n});\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"createPipe()")," function returns ",Object(a.b)("inlineCode",{parentName:"p"},"SpectatorPipe")," with the following properties:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"hostComponent")," - Instance of the host component"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"debugElement")," - The debug element of the fixture around the host component"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"element")," - The native element of the host component"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"detectChanges()")," - A proxy for Angular ",Object(a.b)("inlineCode",{parentName:"li"},"TestBed.fixture.detectChanges()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"inject()")," - A proxy for Angular ",Object(a.b)("inlineCode",{parentName:"li"},"TestBed.inject()"))),Object(a.b)("h3",{id:"setting-factory-defaults"},"Setting factory defaults"),Object(a.b)("p",null,"It is possible to set a default template when creating the factory. Here is an example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { SpectatorPipe, createPipeFactory } from '@ngneat/spectator';\n\nimport { AlternatingSumPipe } from './alternating-sum.pipe';\n\ndescribe('AlternatingSumPipe', () => {\n  let spectator: SpectatorPipe<AlternatingSumPipe>;\n  const createPipe = createPipeFactory({\n    pipe: AlternatingSumPipe,\n    template: `{{ prop | alternatingSum }}`\n  });\n\n  it('should compute the alternating sum of a given list of numbers (prop)', () => {\n    spectator = createPipe({\n      hostProps: {\n        prop: [1, 2, 3]\n      }\n    });\n    expect(spectator.element).toHaveText('2');\n  });\n});\n")),Object(a.b)("h3",{id:"using-custom-host-component"},"Using Custom Host Component"),Object(a.b)("p",null,"The following example illustrates how to test a pipe using a custom host component:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { Component, Input } from '@angular/core';\nimport { SpectatorPipe, createPipeFactory } from '@ngneat/spectator';\n\nimport { AveragePipe } from './average.pipe';\nimport { StatsService } from './stats.service';\n\n@Component({\n  template: `<div>{{ prop | avg }}</div>`\n})\nclass CustomHostComponent {\n  @Input() public prop: number[] = [1, 2, 3];\n}\n\ndescribe('AveragePipe', () => {\n  let spectator: SpectatorPipe<AveragePipe>;\n  const createPipe = createPipeFactory({\n    pipe: AveragePipe,\n    host: CustomHostComponent\n  });\n\n  it('should compute the average of a given list of numbers', () => {\n    spectator = createPipe();\n    expect(spectator.element).toHaveText('2');\n  });\n\n  it('should result to 0 when list of numbers is empty', () => {\n    spectator = createPipe({\n      hostProps: {\n        prop: []\n      }\n    });\n    expect(spectator.element).toHaveText('0');\n  });\n\n  it('should delegate the calculation to the service', () => {\n    const avg = () => 42;\n    const provider = { provide: StatsService, useValue: { avg } };\n    spectator = createPipe({\n      providers: [provider]\n    });\n    expect(spectator.element).toHaveText('42');\n  });\n});\n")))}l.isMDXComponent=!0},131:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},u=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,d=u["".concat(p,".").concat(b)]||u[b]||m[b]||a;return n?o.a.createElement(d,i({ref:t},s,{components:n})):o.a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,p=new Array(a);p[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<a;s++)p[s]=n[s];return o.a.createElement.apply(null,p)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{115:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var o=n(2),r=n(6),c=(n(0),n(131)),a={id:"testing-components",title:"Testing Components"},p={id:"testing-components",title:"Testing Components",description:"Create a component factory by using the `createComponentFactory()` function, passing the component class that you want to test.",source:"@site/docs/testing-components.md",permalink:"/spectator/docs/testing-components",editUrl:"https://github.com/ngneat/spectator/edit/master/docs/docs/testing-components.md",sidebar:"docs",previous:{title:"Installation",permalink:"/spectator/docs/installation"},next:{title:"Testing Directives",permalink:"/spectator/docs/testing-directives"}},i=[{value:"<code>get()</code>",id:"get",children:[]},{value:"<code>inject()</code>",id:"inject",children:[]},{value:"<code>detectChanges()</code>",id:"detectchanges",children:[]},{value:"<code>setInput()</code>",id:"setinput",children:[]},{value:"<code>output()</code>",id:"output",children:[]},{value:"<code>tick(millis?: number)</code>",id:"tickmillis-number",children:[]},{value:"Component Providers",id:"component-providers",children:[]},{value:"Override Modules",id:"override-modules",children:[]}],s={rightToc:i};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Create a component factory by using the ",Object(c.b)("inlineCode",{parentName:"p"},"createComponentFactory()")," function, passing the component class that you want to test.\nThe ",Object(c.b)("inlineCode",{parentName:"p"},"createComponentFactory()")," returns a function that will create a fresh component in each ",Object(c.b)("inlineCode",{parentName:"p"},"it")," block:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"import { Spectator, createComponentFactory } from '@ngneat/spectator';\nimport { ButtonComponent } from './button.component';\n\ndescribe('ButtonComponent', () => {\n  let spectator: Spectator<ButtonComponent>;\n  const createComponent = createComponentFactory(ButtonComponent);\n\n  beforeEach(() => spectator = createComponent());\n\n  it('should have a success class by default', () => {\n    expect(spectator.query('button')).toHaveClass('success');\n  });\n\n  it('should set the class name according to the [className] input', () => {\n    spectator.setInput('className', 'danger');\n    expect(spectator.query('button')).toHaveClass('danger');\n    expect(spectator.query('button')).not.toHaveClass('success');\n  });\n});\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"createComponentFactory")," function can optionally take the following options which extends the basic Angular Testing Module options:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const createComponent = createComponentFactory({\n  component: ButtonComponent,\n  imports: [],\n  providers: [],\n  declarations: [],\n  entryComponents: [],\n  componentProviders: [], // Override the component's providers\n  componentViewProviders: [], // Override the component's view providers\n  overrideModules: [], // Override modules\n  mocks: [], // Providers that will automatically be mocked\n  componentMocks: [], // Component providers that will automatically be mocked\n  componentViewProvidersMocks: [], // Component view providers that will be automatically mocked\n  detectChanges: false, // Defaults to true\n  declareComponent: false, // Defaults to true\n  disableAnimations: false, // Defaults to true\n  shallow: true, // Defaults to false\n});\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"createComponent()")," function optionally takes the following options:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"it('should...', () => {\n  spectator = createComponent({\n    // The component inputs\n    props: {\n      title: 'Click'\n    },\n    // Override the component's providers\n    providers: [],\n    // Whether to run change detection (defaults to true)\n    detectChanges: false\n  });\n\n  expect(spectator.query('button')).toHaveText('Click');\n});\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"createComponent()")," method returns an instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Spectator")," which exposes the following properties:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"fixture")," - The tested component's fixture"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"component")," - The tested component's instance"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"element")," - The tested component's native element"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"debugElement")," - The tested fixture's debug element")),Object(c.b)("p",null,"And the following methods:"),Object(c.b)("h3",{id:"get"},Object(c.b)("inlineCode",{parentName:"h3"},"get()")),Object(c.b)("p",null,"Provides a wrapper for ",Object(c.b)("inlineCode",{parentName:"p"},"TestBed.get()"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const service = spectator.get(QueryService);\n\nconst fromComponentInjector = true;\nconst service = spectator.get(QueryService, fromComponentInjector);\n")),Object(c.b)("h3",{id:"inject"},Object(c.b)("inlineCode",{parentName:"h3"},"inject()")),Object(c.b)("p",null,"Provides a wrapper for Ivy's ",Object(c.b)("inlineCode",{parentName:"p"},"TestBed.inject()"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const service = spectator.inject(QueryService);\n\nconst fromComponentInjector = true;\nconst service = spectator.inject(QueryService, fromComponentInjector);\n")),Object(c.b)("h3",{id:"detectchanges"},Object(c.b)("inlineCode",{parentName:"h3"},"detectChanges()")),Object(c.b)("p",null,"Runs ",Object(c.b)("inlineCode",{parentName:"p"},"detectChanges")," on the tested element/host:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"spectator.detectChanges();\n")),Object(c.b)("h3",{id:"setinput"},Object(c.b)("inlineCode",{parentName:"h3"},"setInput()")),Object(c.b)("p",null,"Changes the value of an ",Object(c.b)("inlineCode",{parentName:"p"},"@Input()")," of the tested component:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"it('should...', () => {\n  spectator.setInput('className', 'danger');\n\n  spectator.setInput({\n    className: 'danger'\n  });\n});\n")),Object(c.b)("h3",{id:"output"},Object(c.b)("inlineCode",{parentName:"h3"},"output()")),Object(c.b)("p",null,"Returns an observable ",Object(c.b)("inlineCode",{parentName:"p"},"@Output()")," of the tested component:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"it('should emit the $event on click', () => {\n  let output;\n  spectator.output('click').subscribe(result => (output = result));\n\n  spectator.component.onClick({ type: 'click' });\n  expect(output).toEqual({ type: 'click' });\n});\n")),Object(c.b)("h3",{id:"tickmillis-number"},Object(c.b)("inlineCode",{parentName:"h3"},"tick(millis?: number)")),Object(c.b)("p",null,"Run the fakeAsync ",Object(c.b)("inlineCode",{parentName:"p"},"tick()")," function and call ",Object(c.b)("inlineCode",{parentName:"p"},"detectChanges()"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"it('should work with tick', fakeAsync(() => {\n  spectator = createComponent(ZippyComponent);\n  spectator.component.update();\n  expect(spectator.component.updatedAsync).toBeFalsy();\n  spectator.tick(6000);\n  expect(spectator.component.updatedAsync).not.toBeFalsy();\n}))\n")),Object(c.b)("h2",{id:"component-providers"},"Component Providers"),Object(c.b)("p",null,"By default, the original component providers (e.g. the ",Object(c.b)("inlineCode",{parentName:"p"},"providers")," on the ",Object(c.b)("inlineCode",{parentName:"p"},"@Component"),") are not touched."),Object(c.b)("p",null,"However, in most cases, you want to access the component's providers in your test or replace them with mocks."),Object(c.b)("p",null,"For example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"@Component({\n  template: '...',\n  providers: [FooService]\n})\nclass FooComponent {\n  constructor(private fooService: FooService} {}\n\n  // ...\n}\n")),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"componentProviders")," to replace the ",Object(c.b)("inlineCode",{parentName:"p"},"FooService")," provider:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const createComponent = createComponentFactory({\n  component: FooComponent,\n  componentProviders: [\n    {\n      provide: FooService,\n      useValue: someThingElse\n    }\n  ]\n})\n")),Object(c.b)("p",null,"Or mock the service by using ",Object(c.b)("inlineCode",{parentName:"p"},"componentMocks"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const createComponent = createComponentFactory({\n  component: FooComponent,\n  componentMocks: [FooService]\n});\n")),Object(c.b)("p",null,"To access the provider, get it from the component injector using the ",Object(c.b)("inlineCode",{parentName:"p"},"fromComponentInjector")," parameter:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"spectator.get(FooService, true)\n")),Object(c.b)("p",null,"In the same way you can also override the component view providers by using the ",Object(c.b)("inlineCode",{parentName:"p"},"componentViewProviders")," and ",Object(c.b)("inlineCode",{parentName:"p"},"componentViewProvidersMocks"),"."),Object(c.b)("p",null,"The same rules also apply to directives using the ",Object(c.b)("inlineCode",{parentName:"p"},"directiveProviders")," and ",Object(c.b)("inlineCode",{parentName:"p"},"directiveMocks")," parameters."),Object(c.b)("h2",{id:"override-modules"},"Override Modules"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"overrideModules")," option to override modules."),Object(c.b)("p",null,"For Example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"createComponentFactory({\n  component: SomeComponent,\n  overrideModules: [\n    [SomeModule, {set: {declarations: [SomeOtherComponent]}],\n    [SomeOtherModule, {set: {declarations: [SomeOtherComponent]}]\n  ]\n})\n")),Object(c.b)("p",null,"cf. ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"https://angular.io/api/core/testing/TestBed#overrideModule"}),"https://angular.io/api/core/testing/TestBed#overrideModule")))}l.isMDXComponent=!0},131:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p({},t,{},e)),n},b=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=l(n),m=o,d=b["".concat(a,".").concat(m)]||b[m]||u[m]||c;return n?r.a.createElement(d,p({ref:t},s,{components:n})):r.a.createElement(d,p({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var s=2;s<c;s++)a[s]=n[s];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
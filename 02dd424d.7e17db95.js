(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{131:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=o.a.createContext({}),p=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},u=function(e){var t=p(e.components);return o.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(c,".").concat(m)]||u[m]||b[m]||a;return n?o.a.createElement(d,l({ref:t},i,{components:n})):o.a.createElement(d,l({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<a;i++)c[i]=n[i];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),o=n(6),a=(n(0),n(131)),c={id:"queries",title:"Queries"},l={id:"queries",title:"Queries",description:"The Spectator API includes convenient methods for querying the DOM as part of a test: `query`, `queryAll`, `queryLast` , `queryHost` and `queryHostAll`. All query methods are polymorphic and allow you to query using any of the following techniques.",source:"@site/docs/queries.md",permalink:"/spectator/docs/queries",editUrl:"https://github.com/ngneat/spectator/edit/master/docs/docs/queries.md",sidebar:"docs",previous:{title:"Helpers",permalink:"/spectator/docs/helpers"},next:{title:"Jest Support",permalink:"/spectator/docs/jest-support"}},s=[{value:"String Selector",id:"string-selector",children:[]},{value:"Type Selector",id:"type-selector",children:[]},{value:"DOM Selector",id:"dom-selector",children:[]},{value:"Testing Select Elements",id:"testing-select-elements",children:[]}],i={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The Spectator API includes convenient methods for querying the DOM as part of a test: ",Object(a.b)("inlineCode",{parentName:"p"},"query"),", ",Object(a.b)("inlineCode",{parentName:"p"},"queryAll"),", ",Object(a.b)("inlineCode",{parentName:"p"},"queryLast")," , ",Object(a.b)("inlineCode",{parentName:"p"},"queryHost")," and ",Object(a.b)("inlineCode",{parentName:"p"},"queryHostAll"),". All query methods are polymorphic and allow you to query using any of the following techniques."),Object(a.b)("h2",{id:"string-selector"},"String Selector"),Object(a.b)("p",null," Pass a string selector (in the same style as you would when using jQuery or document.querySelector) to query for elements that match that path in the DOM. This method for querying is equivalent to Angular's By.css predicate. Note that native HTML elements will be returned. For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"// Returns a single HTMLElement\nspectator.query('div > ul.nav li:first-child');\n// Returns an array of all matching HTMLElements\nspectator.queryAll('div > ul.nav li');\n\n// Query from the document context\nspectator.query('div', { root: true });\n\nspectator.query('app-child', { read: ChildServiceService });\n")),Object(a.b)("h2",{id:"type-selector"},"Type Selector"),Object(a.b)("p",null,"Pass a type (such as a component, directive or provider class) to query for instances of that type in the DOM. This is equivalent to Angular's ",Object(a.b)("inlineCode",{parentName:"p"},"By.directive")," predicate. You can optionally pass in a second parameter to read a specific injection token from the matching elements' injectors. For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"// Returns a single instance of MyComponent (if present)\nspectator.query(MyComponent);\n\n// Returns the instance of `SomeService` found in the instance of `MyComponent` that exists in the DOM (if present)\nspectator.query(MyComponent, { read: SomeService });\n\nspectator.query(MyComponent, { read: ElementRef });\nhost.queryLast(ChildComponent);\nhost.queryAll(ChildComponent);\n")),Object(a.b)("h2",{id:"dom-selector"},"DOM Selector"),Object(a.b)("p",null,"Spectator allows you to query for elements using selectors inspired by ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://testing-library.com/docs/dom-testing-library/api-queries"}),"dom-testing-library"),". The available selectors are:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"spectator.query(byPlaceholder('Please enter your email address'));\nspectator.query(byValue('By value'));\nspectator.query(byTitle('By title'));\nspectator.query(byAltText('By alt text'));\nspectator.query(byLabel('By label'));\nspectator.query(byText('By text'));\nspectator.query(byText('By text', {selector: '#some .selector'}));\nspectator.query(byTextContent('By text content', {selector: '#some .selector'}));\n")),Object(a.b)("p",null,"The difference between ",Object(a.b)("inlineCode",{parentName:"p"},"byText")," and ",Object(a.b)("inlineCode",{parentName:"p"},"byTextContent")," is that the former doesn't match text inside a nested elements."),Object(a.b)("p",null,"For example, in this following HTML ",Object(a.b)("inlineCode",{parentName:"p"},"byText('foobar', {selector: 'div'})")," won't match the following ",Object(a.b)("inlineCode",{parentName:"p"},"div"),", but ",Object(a.b)("inlineCode",{parentName:"p"},"byTextContent")," will:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),"<div>\n  <span>foo</span>\n  <span>bar</span>\n</div>\n")),Object(a.b)("h2",{id:"testing-select-elements"},"Testing Select Elements"),Object(a.b)("p",null,"Spectator allows you to test ",Object(a.b)("inlineCode",{parentName:"p"},"<select></select>")," elements easily, and supports multi select."),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"it('should set the correct options on multi select', () => {\n  const select = spectator.query('#test-multi-select') as HTMLSelectElement;\n  spectator.selectOption(select, ['1', '2']);\n  expect(select).toHaveSelectedOptions(['1', '2']);\n});\n\nit('should set the correct option on standard select', () => {\n  const select = spectator.query('#test-single-select') as HTMLSelectElement;\n  spectator.selectOption(select, '1');\n  expect(select).toHaveSelectedOptions('1');\n});\n")),Object(a.b)("p",null,"It also allows you to check if your ",Object(a.b)("inlineCode",{parentName:"p"},"change")," event handler is acting correctly for each item selected. You can disable this if you need to pre set choices without dispatching the change event."),Object(a.b)("p",null,"API:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"spectator.selectOption(selectElement: HTMLSelectElement, options: string | string[] | HTMLOptionElement | HTMLOptionElement[], config: { emitEvents: boolean } = { emitEvents: true });\n")),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"it('should dispatch correct number of change events', () => {\n  const onChangeSpy = spyOn(spectator.component, 'handleChange');\n  const select = spectator.query('#test-onchange-select') as HTMLSelectElement;\n\n  spectator.selectOption(select, ['1', '2'], { emitEvents: true});\n\n  expect(select).toHaveSelectedOptions(['1', '2']);\n  expect(onChangeSpy).toHaveBeenCalledTimes(2);\n});\n\nit('should not dispatch correct number of change events', () => {\n  const onChangeSpy = spyOn(spectator.component, 'handleChange');\n  const select = spectator.query('#test-onchange-select') as HTMLSelectElement;\n\n  spectator.selectOption(select, ['1', '2'], { emitEvents: false});\n\n  expect(select).toHaveSelectedOptions(['1', '2']);\n  expect(onChangeSpy).not.toHaveBeenCalledTimes(2);\n});\n")),Object(a.b)("p",null,"You can also pass ",Object(a.b)("inlineCode",{parentName:"p"},"HTMLOptionElement"),"(s) as arguments to ",Object(a.b)("inlineCode",{parentName:"p"},"selectOption")," and the ",Object(a.b)("inlineCode",{parentName:"p"},"toHaveSelectedOptions")," matcher. This is particularly useful when you are using ",Object(a.b)("inlineCode",{parentName:"p"},"[ngValue]")," binding on the ",Object(a.b)("inlineCode",{parentName:"p"},"<option>"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"it('should set the correct option on single select when passing the element', () => {\n  const select = spectator.query('#test-single-select-element') as HTMLSelectElement;\n\n  spectator.selectOption(select, spectator.query(byText('Two')) as HTMLOptionElement);\n\n  expect(select).toHaveSelectedOptions(spectator.query(byText('Two')) as HTMLOptionElement);\n});\n")))}p.isMDXComponent=!0}}]);